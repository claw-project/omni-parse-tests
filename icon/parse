#!/bin/bash

#
# This scripts helps to test the parsing of the full ICON
# code by the OMNI Compiler.
#

function show_help(){
  echo "$0 [-s] [-p] [--with-omni]"
  echo ""
  echo "Options:"
  echo " -s          Skip CLAW/OMNI compilation/install (use current version)"
  echo " -p          Skip parsing step"
  echo " -b          Specify a branch to test"
  echo " -o          Use the latest OMNI Compiler version for the test"
}

source ./common/utility.sh
source ./common/omni.lib.sh

# CLAW repository variables
CLAW_BRANCH="master"
CLAW_MAIN_REPO="https://github.com/claw-project/claw-compiler.git"
CLAW_REPO=${CLAW_MAIN_REPO}
CLAWFC=./claw/bin/clawfc

# Working directories for the test
TEST_DIR=${PWD}/build
#INSTALL_DIR=$TEST_DIR/install
CLAW_OUTPUT="./processed/icon"
XMOD_DIR="./xmods/icon"
GLOBAL_XMODS="../global_modules"
GLOBAL_INCLUDE="../global_include"

# Default compiler used
BASE_COMPILER="gnu"

# Option switches
SKIP_CLAW=false
SKIP_PARSING=false
OMNI_LATEST=false

# ICON related variables
ICON_MAIN_REPO="git@github.com:C2SM-RCM/icon-eniac.git"
ICON_REP="icon-eniac"
STANDALONE_GIT_BRANCH=""
ICON_SRC="./${ICON_REP}/src/"
ICON_START="drivers/icon.f90"
ICON_DEP="dependencies_icon"
EXTERNAL_XMODS="../icon/external_xmods"
ICON_INC="-I ${GLOBAL_INCLUDE} -I ${ICON_REP}/src/include/ "
ICON_INC+="-I ${ICON_REP}/src/shr_horizontal/ "
ICON_INC+="-I ${ICON_REP}/src/atm_phy_psrad/ -I ${ICON_REP}/src/atm_phy_les"
FDEP_EXCLUDED="--exclude testbed/mo_test_communication.f90:testbed/mo_icon_testbed.f90"
FDEP_EXCLUDED_DIR="--exclude-dir externals/jsbach"

# Preprocessor macros definition
ICON_DEFINITIONS="-DHAVE_SLOW_PASSIVE_TARGET_ONESIDED -D__LOOP_EXCHANGE "
ICON_DEFINITIONS+="-DgFortran -D__ICON__ -D__NO_ICON_TESTBED__ -DUSE_XML2 "
ICON_DEFINITIONS+="-DYAC_coupling -DUSE_MPI -D__LOOP_EXCHANGE "
ICON_DEFINITIONS+="-DHAVE_FC_ATTRIBUTE_CONTIGUOUS"


# Parsing output
PARSING_OUTPUT=${TEST_DIR}/icon_parse_test.log
TIMING_OUTPUT=${TEST_DIR}/icon_timing.log

while getopts "hspob:" opt; do
  case "$opt" in
  h)
    show_help
    exit 0
    ;;
  b) STANDALONE_GIT_BRANCH=$OPTARG ;;
  s) SKIP_CLAW=true;;
  p) SKIP_PARSING=true;;
  o) OMNI_LATEST=true;;
  *) show_help
     exit 1
     ;;
  esac
done

if [[ ${OMNI_LATEST} == true ]] && [[ ${SKIP_CLAW} == true ]]; then
  echo "Incompatible options -o and -s ..."
  exit 1
fi

COMPUTER=$(hostname)

#if [[ $COMPUTER == *"daint"* ]]
#then
#  COMPUTER="daint"
#  CMAKE_MOD="CMake"
if [[ ${COMPUTER} == *"kesch"* ]]; then
  COMPUTER="kesch"
fi

# Try to load machine specific compiler information
COMPILER_FILE="./compiler/${COMPUTER}.${BASE_COMPILER}.sh"
if [ -f ${COMPILER_FILE} ]; then
  # shellcheck source=./compiler/clementon2.gnu.sh
  source ${COMPILER_FILE}
else
  echo "Warning: Compiler file ${COMPILER_FILE} missing. Default values are used."
fi

echo ""
echo "====================================="
echo "ICON -> CLAW/OMNI Compiler parse test"
echo "====================================="
echo "- ICON information"
echo "  - Git repository: $ICON_MAIN_REPO"
echo "  - Git branch: ${STANDALONE_GIT_BRANCH}"

# Fetch the submodules
git submodule init
git submodule update

if [[ ${SKIP_CLAW} == false ]]; then
  # Specific CLAW/OMNI information
  echo "- CLAW Compiler information:"
  echo "  - Git repository: $CLAW_REPO"
  echo "  - Git branch: $CLAW_BRANCH"
  echo "  - Base compiler: $BASE_COMPILER"
  echo "  - Target directory: $TEST_DIR"

  rm -rf "$TEST_DIR"
  mkdir "$TEST_DIR"

  ###############################
  # 1. CLAW FORTRAN Compiler step
  ###############################

  echo ">>> CLAW FORTRAN COMPILER STEP: Clone and compile"
  if [[ ${OMNI_LATEST} == true ]]; then
    ./common/compile.claw -d "${TEST_DIR}" -c "${BASE_COMPILER}" -r "${CLAW_REPO}" -b "${CLAW_BRANCH}" -o
  else
    ./common/compile.claw -d "${TEST_DIR}" -c "${BASE_COMPILER}" -r "${CLAW_REPO}" -b "${CLAW_BRANCH}"
  fi
else
  rm -rf "${TEST_DIR:?}"/${ICON_REP}
fi

echo "============================================"
echo ""


cd "${TEST_DIR}" || exit 1
WORKING_DIR="$PWD"

# Get git hashes for the log
cd claw-compiler || exit 1
CLAW_HASH=$(git rev-parse HEAD)
cd omni-compiler || exit 1
OMNI_HASH=$(git rev-parse HEAD)
cd "${WORKING_DIR}" || exit 1


if [[ ${SKIP_PARSING} == false ]]; then

  ####################
  # 2. ICON-ENIAC step
  ####################

  if [[ "${STANDALONE_GIT_BRANCH}" != "" ]]; then
    git clone -b "${STANDALONE_GIT_BRANCH}" "${ICON_MAIN_REPO}"
  else
    git clone --depth 1 "${ICON_MAIN_REPO}"
  fi

  cd ${ICON_REP} || exit 1
  git submodule init
  git submodule update
  ICON_HASH=$(git rev-parse HEAD)
  cd "${WORKING_DIR}" || exit 1

  {
    echo "ICON PARSING TESTS"
    echo "-------------------"
    echo "Git version information:"
    echo "- CLAW git version: ${CLAW_HASH}"
    echo "- OMNI git version: ${OMNI_HASH}"
    echo "- ICON-POMPA git version: ${ICON_HASH}"
  } > "${PARSING_OUTPUT}"


  ####################
  # 3. Dependency step
  ####################

  # Generate the dependency list for the parsing order
  print_green "[INFO] Generate dependencies list"
  echo "../fdependencies/generate_dep.py --recursive ${FDEP_EXCLUDED} ${FDEP_EXCLUDED_DIR} ${ICON_SRC} ${ICON_START} > ${ICON_DEP} 2> dependencies_icon.out" > "${PARSING_OUTPUT}"
  # shellcheck disable=SC2086
  ../fdependencies/generate_dep.py --recursive ${FDEP_EXCLUDED} ${FDEP_EXCLUDED_DIR} ${ICON_SRC} ${ICON_START} > ${ICON_DEP} 2> dependencies_icon.out

  # Check existence of the dependencies file
  if [[ ! -f ${ICON_DEP} ]]; then
    echo "ERROR: ${ICON_DEP} does not exists!"
    exit 1
  fi

  # Check that dependencies file has information in it
  if [[ $(wc -l < ${ICON_DEP}) -lt 2 ]]; then
    echo "ERROR: ${ICON_DEP} is empty!"
    exit 1
  fi


  #################
  # 4. Parsing step
  #################

  # Check existence of the CLAW FORTRAN Compiler
  if [[ ! -f ${CLAWFC} ]]; then
    echo "ERROR: ${CLAWFC} does not exists!"
    exit 1
  fi

  mkdir -p ${XMOD_DIR}
  mkdir -p ${CLAW_OUTPUT}

  start_parsing=$(date +%s)

  parsed_files=0
  total_files=$(wc -l < ${ICON_DEP})

  echo "START_PARSING: ${start_parsing}" >> ${PARSING_OUTPUT}

  echo ">>> Parsing files ${total_files}"
  echo "" >> "${PARSING_OUTPUT}"
  echo "Parsing files:" >> "${PARSING_OUTPUT}"
  while IFS= read -r f90_file; do
    (( current_file_nb=parsed_files+1 ))
    echo "    Processing file [$current_file_nb] ${ICON_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}"
    echo "    Processing file ${ICON_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}" >> "${PARSING_OUTPUT}"
    echo "cmd: ${CLAWFC} ${ICON_DEFINITIONS} --no-dep --debug-omni -J ${XMOD_DIR} -J ${GLOBAL_XMODS} -J ${EXTERNAL_XMODS} --force ${ICON_INC} -I ${INCLUDE_MPI} -o ${CLAW_OUTPUT}/${f90_file} ${ICON_SRC}${f90_file}" >> "${PARSING_OUTPUT}" 2>&1
    mkdir -p "$(dirname "${CLAW_OUTPUT}"/"${f90_file}")"

    echo "$f90_file" >> ${TIMING_OUTPUT}
    # shellcheck disable=SC2086
    { time ${CLAWFC} "${ICON_DEFINITIONS}" --no-dep --debug-omni -J ${XMOD_DIR} -J ${GLOBAL_XMODS} -J ${EXTERNAL_XMODS} --force ${ICON_INC} -I "${INCLUDE_MPI}" -o "${CLAW_OUTPUT}"/"${f90_file}" "${ICON_SRC}""${f90_file}" >> "${PARSING_OUTPUT}" 2>&1 ; } 2>> ${TIMING_OUTPUT}
    (( parsed_files=parsed_files+1 ))
    if [[ ! -f ${CLAW_OUTPUT}/${f90_file} ]]; then
      print_red "[FAILED] ""${ICON_SRC}""${f90_file}"
    fi
  done < ./${ICON_DEP}

  end_parsing=$(date +%s)

  parsing_time=$((end_parsing-start_parsing))

  echo "END_PARSING: ${end_parsing}" >> ${PARSING_OUTPUT}
  echo "PARSING TIME: ${parsing_time}" >> ${PARSING_OUTPUT}
fi


#################
# 5. Control step
#################

# Control if present .xmod file has been produced correctly
omni::check_xmod ${XMOD_DIR} xmod_errors

# Control output fortran file any corruption
omni::check_fortran ${ICON_DEP} ${CLAW_OUTPUT} f90_errors

echo ""
echo "===================================="
echo "ICON-ENIAC full parsing test results"
echo "===================================="

# shellcheck disable=SC2154
if [[ ${xmod_errors} -ne 0 ]] || [[ ${f90_errors} -ne 0 ]]; then
  # Check potential known errors in log file
  omni::check_error_log "${PARSING_OUTPUT}"
  print_red "FAILED: Parsing test has detected some errors."
  exit 1
else
  print_green "SUCCESS: Test has be executed correctly."
  echo "================================"
  exit 0
fi
