#!/bin/bash

#
# This scripts helps to test the parsing of the full ICON
# code by the OMNI Compiler.
#

function show_help(){
  echo "$0 [-s] [-p] [--with-omni]"
  echo ""
  echo "Options:"
  echo " -s                Skip CLAW/OMNI compilation/install"
  echo " -p                Skip parsing step"
  echo " -o                Use the latest OMNI Compiler version for the test"
}

source ./common/check.omni.lib.sh
source ./common/utility.sh

# CLAW repository variables
CLAW_BRANCH="master"
CLAW_MAIN_REPO="https://github.com/claw-project/claw-compiler.git"
CLAW_REPO=${CLAW_MAIN_REPO}
CLAWFC=./claw/bin/clawfc

# Working directories for the test
TEST_DIR=${PWD}/build
#INSTALL_DIR=$TEST_DIR/install
CLAW_OUTPUT="./processed/icon"
XMOD_DIR="./xmods/icon"

# Default compiler used
BASE_COMPILER="gnu"

# Option switches
SKIP_CLAW=false
SKIP_PARSING=false
OMNI_LATEST=false

# ICON related variables
ICON_MAIN_REPO="git@github.com:C2SM-RCM/icon-eniac.git"
ICON_REP="icon-eniac"
ICON_SRC="./${ICON_REP}/src/"
ICON_START="drivers/icon.f90"
ICON_DEP="dependencies_icon"
EXTERNAL_XMODS="../icon/external_xmods"
ICON_INC="${ICON_REP}/src/include/"

# Preprocessor macros definition
ICON_DEFINITIONS="-D__ICON__ -DNOMPI"

# Parsing output
PARSING_OUTPUT=${TEST_DIR}/icon_parse_test.log

while getopts "hspo" opt; do
  case "$opt" in
  h)
    show_help
    exit 0
    ;;
  s) SKIP_CLAW=true;;
  p) SKIP_PARSING=true;;
  o) OMNI_LATEST=true;;
  *) show_help
     exit 1
     ;;
#  f)
#    CLAW_REPO=$CLAW_FORK_REPO
#    ;;
#  b)
#    CLAW_BRANCH=$OPTARG
#    ;;
#  c)
#    CLAW_BASE_COMPILER=$OPTARG
#    ;;
#  i)
#    CLAW_INSTALL_DIR=$OPTARG
#    ;;
  esac
done

if [[ ${OMNI_LATEST} == true ]] && [[ ${SKIP_CLAW} == true ]]; then
  echo "Incompatible options -o and -s ..."
  exit 1
fi

COMPUTER=$(hostname)

#if [[ $COMPUTER == *"daint"* ]]
#then
#  COMPUTER="daint"
#  CMAKE_MOD="CMake"
if [[ ${COMPUTER} == *"kesch"* ]]; then
  COMPUTER="kesch"
fi

# Try to load machine specific compiler information
COMPILER_FILE="./compiler/${COMPUTER}.${BASE_COMPILER}.sh"
if [ -f ${COMPILER_FILE} ]; then
  # shellcheck source=./compiler/clementon2.gnu.sh
  source ${COMPILER_FILE}
else
  echo "Warning: Compiler file ${COMPILER_FILE} missing. Default values are used."
fi

#
#
#
## Load recent version of cmake
#module load $CMAKE_MOD
#
## Load correct PrgEnv
#case  "$CLAW_BASE_COMPILER" in
#  "gnu")
#    module rm PrgEnv-pgi && module rm PrgEnv-cray
#    module load PrgEnv-gnu
#    if [[ $COMPUTER == "kesch" ]]
#    then
#      CLAW_FC=gfortran
#      CLAW_CC=gcc
#      CLAW_CXX=g++
#    elif [[ $COMPUTER == "daint" ]]
#    then
#      CLAW_FC=ftn
#      CLAW_CC=cc
#      CLAW_CXX=CC
#      OMNI_MPI_CC="MPI_CC=cc"
#      OMNI_MPI_FC="MPI_FC=ftn"
#      ADDITONAL_OPTIONS="-DOMNI_MPI_CC=$OMNI_MPI_CC -DOMNI_MPI_FC=$OMNI_MPI_FC"
#    fi
#  ;;
#  "pgi")
#    module rm PrgEnv-gnu && module rm PrgEnv-cray
#    module load PrgEnv-pgi
#    if [[ $COMPUTER == "kesch" ]]
#    then
#      CLAW_FC=mpif90
#      CLAW_CC=mpicc
#      CLAW_CXX=pgc++
#    elif [[ $COMPUTER == "daint" ]]
#    then
#      module load gcc
#      CLAW_FC=ftn
#      CLAW_CC=cc
#      CLAW_CXX=CC
#      OMNI_MPI_CC="MPI_CC=cc"
#      OMNI_MPI_FC="MPI_FC=ftn"
#      ADDITONAL_OPTIONS="-DOMNI_MPI_CC=$OMNI_MPI_CC -DOMNI_MPI_FC=$OMNI_MPI_FC"
#    fi
#  ;;
#  "cray")
#    module rm PrgEnv-pgi && module rm PrgEnv-gnu
#    module load PrgEnv-cray
#    CLAW_FC=ftn
#    CLAW_CC=cc
#    CLAW_CXX=CC
#  ;;
#  *)
#    echo "Error: Unknown compiler ..."
#    exit 1
#esac

echo ""
echo "====================================="
echo "ICON -> CLAW/OMNI Compiler parse test"
echo "====================================="
echo "- ICON information"
echo "  - Git repository: $ICON_MAIN_REPO"

# Fetch the submodules
git submodule init
git submodule update

if [[ ${SKIP_CLAW} == false ]]; then
  # Specific CLAW/OMNI information
  echo "- CLAW Compiler information:"
  echo "  - Git repository: $CLAW_REPO"
  echo "  - Git branch: $CLAW_BRANCH"
  echo "  - Base compiler: $BASE_COMPILER"
  echo "  - Target directory: $TEST_DIR"

  rm -rf "$TEST_DIR"
  mkdir "$TEST_DIR"

  ###############################
  # 1. CLAW FORTRAN Compiler step
  ###############################

  echo ">>> CLAW FORTRAN COMPILER STEP: Clone and compile"
  if [[ ${OMNI_LATEST} == true ]]; then
    ./common/compile.claw -d "$TEST_DIR" -c "$BASE_COMPILER" -r "$CLAW_REPO" -b "$CLAW_BRANCH" -o
  else
    ./common/compile.claw -d "$TEST_DIR" -c "$BASE_COMPILER" -r "$CLAW_REPO" -b "$CLAW_BRANCH"
  fi
else
  rm -rf "${TEST_DIR:?}"/${ICON_REP}
fi

echo "============================================"
echo ""


cd "$TEST_DIR" || exit 1
WORKING_DIR="$PWD"

# Get git hashes for the log
echo "ICON PARSING TESTS" > "${PARSING_OUTPUT}"
echo "-------------------" >> "${PARSING_OUTPUT}"
echo "Git version information:" >> "${PARSING_OUTPUT}"
cd claw-compiler || exit 1
CLAW_HASH=$(git rev-parse HEAD)
echo "- CLAW git version: $CLAW_HASH" >> "${PARSING_OUTPUT}"
cd omni-compiler || exit 1
OMNI_HASH=$(git rev-parse HEAD)
echo "- OMNI git version: $OMNI_HASH" >> "${PARSING_OUTPUT}"
cd "$WORKING_DIR" || exit 1


if [[ ${SKIP_PARSING} == false ]]; then

  ####################
  # 2. ICON-ENIAC step
  ####################

  git clone ${ICON_MAIN_REPO}
  cd ${ICON_REP} || exit 1
  git submodule init
  git submodule update
  ICON_HASH=$(git rev-parse HEAD)
  echo "- ICON-POMPA git version: $ICON_HASH" >> "${PARSING_OUTPUT}"
  cd "$WORKING_DIR" || exit 1


  ####################
  # 3. Dependency step
  ####################

  # Generate the dependency list for the parsing order
  print_green "[INFO] Generate dependencies list"
  echo "../fdependencies/generate_dep.py --recursive ${ICON_SRC} ${ICON_START} > ${ICON_DEP} 2> dependencies_icon.out" > "${PARSING_OUTPUT}"
  ../fdependencies/generate_dep.py --recursive ${ICON_SRC} ${ICON_START} > ${ICON_DEP} 2> dependencies_icon.out

  # Check existence of the dependencies file
  if [[ ! -f ${ICON_DEP} ]]; then
    echo "ERROR: ${ICON_DEP} does not exists!"
    exit 1
  fi

  # Check that dependencies file has information in it
  if [[ $(wc -l < ${ICON_DEP}) -lt 2 ]]; then
    echo "ERROR: ${ICON_DEP} is empty!"
    exit 1
  fi


  #################
  # 4. Parsing step
  #################

  # Check existence of the CLAW FORTRAN Compiler
  if [[ ! -f ${CLAWFC} ]]; then
    echo "ERROR: ${CLAWFC} does not exists!"
    exit 1
  fi

  mkdir -p ${XMOD_DIR}
  mkdir -p ${CLAW_OUTPUT}

  parsed_files=0
  echo ">>> Parsing files"
  echo "" >> "${PARSING_OUTPUT}"
  echo "Parsing files:" >> "${PARSING_OUTPUT}"
  while IFS= read -r f90_file; do
    echo "    Processing file ${ICON_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}"
    echo "    Processing file ${ICON_SRC}${f90_file} -> ${CLAW_OUTPUT}/${f90_file}" >> "${PARSING_OUTPUT}"
    echo "cmd: ${CLAWFC} ${ICON_DEFINITIONS} --no-dep --debug-omni -J ${XMOD_DIR} -J ${EXTERNAL_XMODS} --force -I ${ICON_INC} -I ${INCLUDE_MPI} -o ${CLAW_OUTPUT}/${f90_file} ${ICON_SRC}${f90_file}" >> "${PARSING_OUTPUT}" 2>&1
    mkdir -p "$(dirname "${CLAW_OUTPUT}"/"${f90_file}")"
    ${CLAWFC} "${ICON_DEFINITIONS}" --no-dep --debug-omni -J ${XMOD_DIR} -J ${EXTERNAL_XMODS} --force -I "${ICON_INC}" -I "${INCLUDE_MPI}" -o "${CLAW_OUTPUT}"/"${f90_file}" "${ICON_SRC}""${f90_file}" >> "${PARSING_OUTPUT}" 2>&1
    (( parsed_files=parsed_files+1 ))
    if [[ ! -f ${CLAW_OUTPUT}/${f90_file} ]]; then
      print_red "[FAILED] ""${ICON_SRC}""${f90_file}"
    fi
  done < ./${ICON_DEP}
fi


#################
# 5. Control step
#################

# Control if present .xmod file has been produced correctly
omni::check_xmod ${XMOD_DIR} xmod_errors

# Control output fortran file any corruption
omni::check_fortran ${ICON_DEP} ${CLAW_OUTPUT} f90_errors

echo ""
echo "===================================="
echo "ICON-ENIAC full parsing test results"
echo "===================================="

# shellcheck disable=SC2154
if [[ ${xmod_errors} -ne 0 ]] || [[ ${f90_errors} -ne 0 ]]; then
  # Check potential known errors in log file
  omni::check_error_log "${PARSING_OUTPUT}"
  print_red "FAILED: Parsing test has detected some errors."
  exit 1
else
  print_green "SUCCESS: Test has be executed correctly."
  echo "================================"
  exit 0
fi
